import yaml
import cv2
import os
import glob
os.environ["KMP_DUPLICATE_LIB_OK"]="TRUE"
import numpy as np
import random
import shutil

def read_txt_file(file_path):
    """
    Beolvas egy txt f√°jlt √©s visszaadja a tartalm√°t.

    Args:
        file_path (str): A txt f√°jl el√©r√©si √∫tja

    Returns:
        str: A f√°jl tartalma, vagy None ha hiba t√∂rt√©nt
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            lines = file.readlines()
            # Sorok v√©g√©r≈ël elt√°vol√≠tjuk a \n karaktereket
            lines = [line.strip() for line in lines]
            return lines
    except FileNotFoundError:
        print(f"Hiba: A f√°jl nem tal√°lhat√≥: {file_path}")
        return None
    except PermissionError:
        print(f"Hiba: Nincs jogosults√°g a f√°jl olvas√°s√°hoz: {file_path}")
        return None
    except UnicodeDecodeError:
        print(f"Hiba: Nem siker√ºlt dek√≥dolni a f√°jlt UTF-8 k√≥dol√°ssal: {file_path}")
        # Pr√≥b√°lkoz√°s m√°s k√≥dol√°ssal
        try:
            with open(file_path, 'r', encoding='cp1252') as file:
                content = file.read()
                print("Sikeresen beolvasva cp1252 k√≥dol√°ssal.")
                return content
        except:
            print("Nem siker√ºlt m√°s k√≥dol√°ssal sem beolvasni.")
            return None
    except Exception as e:
        print(f"V√°ratlan hiba t√∂rt√©nt: {e}")
        return None


def setup_yolov11_dataset(input_dir, output_dir, split_ratio=0.8):
    """
    L√©trehozza a YOLOv11 betan√≠t√°shoz sz√ºks√©ges k√∂nyvt√°rszerkezetet √©s sz√©tosztja az adatokat.

    :param input_dir: Az a k√∂nyvt√°r, amely tartalmazza a .jpg √©s .txt f√°jlokat.
    :param output_dir: Az a k√∂nyvt√°r, ahol a kimeneti strukt√∫ra l√©trej√∂n.
    :param split_ratio: A tr√©ning √©s valid√°ci√≥s adathalmaz ar√°nya (pl. 0.8 = 80% tr√©ning).
    """
    # Ellen≈ërizze, hogy az input k√∂nyvt√°r l√©tezik-e
    if not os.path.exists(input_dir):
        raise FileNotFoundError(f"A megadott bemeneti k√∂nyvt√°r nem l√©tezik: {input_dir}")

    # YOLOv8 k√∂nyvt√°rszerkezet l√©trehoz√°sa
    train_images_dir = os.path.join(output_dir, "train", "images")
    train_labels_dir = os.path.join(output_dir, "train", "labels")
    val_images_dir = os.path.join(output_dir, "val", "images")
    val_labels_dir = os.path.join(output_dir, "val", "labels")

    for directory in [train_images_dir, train_labels_dir, val_images_dir, val_labels_dir]:
        os.makedirs(directory, exist_ok=True)

    # Az √∂sszes .jpg √©s .txt f√°jl beolvas√°sa
    image_files = glob.glob(os.path.join(input_dir, "*.jpg"))
    label_files = glob.glob(os.path.join(input_dir, "*.txt"))

    # Az azonos nev≈± f√°jlok p√°ros√≠t√°sa
    base_names = set(os.path.splitext(os.path.basename(f))[0] for f in image_files)
    paired_files = [(os.path.join(input_dir, f + ".jpg"), os.path.join(input_dir, f + ".txt"))
                    for f in base_names if os.path.join(input_dir, f + ".txt") in label_files]

    # A f√°jlok v√©letlenszer≈± sorrendbe √°ll√≠t√°sa
    random.shuffle(paired_files)

    # Az adatok sz√©toszt√°sa tr√©ning √©s valid√°ci√≥s halmazokra
    split_index = int(len(paired_files) * split_ratio)
    train_files = paired_files[:split_index]
    val_files = paired_files[split_index:]

    # F√°jlok √°tm√°sol√°sa a megfelel≈ë k√∂nyvt√°rakba
    for image_path, label_path in train_files:
        shutil.copy(image_path, train_images_dir)
        shutil.copy(label_path, train_labels_dir)

    for image_path, label_path in val_files:
        shutil.copy(image_path, val_images_dir)
        shutil.copy(label_path, val_labels_dir)

    print(f"#INFO: Adatok sikeresen sz√©tosztva √©s √°tm√°solva a YOLOv11 k√∂nyvt√°rszerkezetbe.")
    print(f"#INFO: Tr√©ning adatok: {len(train_files)} f√°jl, Valid√°ci√≥s adatok: {len(val_files)} f√°jl.")

    files = glob.glob(os.path.join(train_images_dir, "*.jpg"))
    for img in files:
        raw_image = cv2.imread(img)
        clahe_image = clahe(raw_image)
        cv2.imwrite(img, clahe_image)

    files = glob.glob(os.path.join(val_images_dir, "*.jpg"))
    for img in files:
        raw_image = cv2.imread(img)
        clahe_image = clahe(raw_image)
        cv2.imwrite(img, clahe_image)

    print("#INFO: K√©pek el≈ëfeldolgoz√°sa CLAHE algoritmussal k√©sz!")

def load_yaml_config(file_path):
    """
    Beolvassa a YAML konfigur√°ci√≥s f√°jlt.

    :param file_path: Az el√©r√©si √∫t a YAML f√°jlhoz.
    :return: A YAML f√°jl tartalma Python dictionary-k√©nt.
    """
    try:
        with open(file_path, 'r') as file:
            config = yaml.safe_load(file)  # A safe_load biztons√°gosabb, mint a load
            return config
    except FileNotFoundError:
        print(f"Hiba: A f√°jl nem tal√°lhat√≥: {file_path}")
    except yaml.YAMLError as e:
        print(f"Hiba t√∂rt√©nt a YAML beolvas√°sakor: {e}")

def adjust_brightness_contrast(image, alpha=1.2, beta=20):
    """
    Alkalmaz kontraszt √©s f√©nyer≈ë m√≥dos√≠t√°st.
    alpha: A kontraszt (1.0 nem v√°ltoztat semmit, >1.0 n√∂veli, <1.0 cs√∂kkenti).
    beta: A f√©nyer≈ë (0 nem v√°ltoztat semmit, pozit√≠v √©rt√©k n√∂veli, negat√≠v cs√∂kkenti).
    """
    return cv2.convertScaleAbs(image, alpha=alpha, beta=beta)

def histogram_equalization(image):
    """
    Histogramaegyenl√≠t√©s sz√ºrke√°rnyalat√∫ k√©peken.
    """
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    equalized_image = cv2.equalizeHist(gray_image)
    return cv2.cvtColor(equalized_image, cv2.COLOR_GRAY2BGR)

def clahe(image):
    """
    CLAHE (Contrast Limited Adaptive Histogram Equalization) alkalmaz√°sa.
    """
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8))
    clahe_image = clahe.apply(gray_image)
    return cv2.cvtColor(clahe_image, cv2.COLOR_GRAY2BGR)

def denoise_image(image):
    """
    Zajcs√∂kkent√©s a k√©pen bilater√°lis sz≈±r√©ssel.
    """
    return cv2.bilateralFilter(image, d=9, sigmaColor=75, sigmaSpace=75)

def create_mosaic(images, titles, rows, cols):
    """
    K√©pek √©s feliratok alapj√°n mozaik l√©trehoz√°sa.
    images: A k√©pek list√°ja.
    titles: A k√©pekhez tartoz√≥ feliratok list√°ja.
    rows: A mozaik sorainak sz√°ma.
    cols: A mozaik oszlopainak sz√°ma.
    """
    # A k√©pek √°tm√©retez√©se, hogy illeszkedjenek a mozaikba
    max_height = max([img.shape[0] for img in images])
    max_width = max([img.shape[1] for img in images])

    # √öj, √ºres mozaik k√©sz√≠t√©se
    mosaic = np.zeros((max_height * rows, max_width * cols, 3), dtype=np.uint8)

    # A k√©pek elhelyez√©se a mozaikban
    for idx, img in enumerate(images):
        row = idx // cols
        col = idx % cols
        y_offset = row * max_height
        x_offset = col * max_width
        mosaic[y_offset:y_offset + img.shape[0], x_offset:x_offset + img.shape[1]] = img

        # Felirat hozz√°ad√°sa a k√©p al√°
        font = cv2.FONT_HERSHEY_SIMPLEX
        text = titles[idx]
        position = (x_offset + 10, y_offset + img.shape[0] - 10)
        cv2.putText(mosaic, text, position, font, 1, (255, 255, 255), 2, cv2.LINE_AA)

    return mosaic

def train_data_flip():
    # üìÇ K√∂nyvt√°r megad√°sa, ahol a k√©pek √©s annot√°ci√≥k vannak
    input_dir_images = os.path.join("fiok_train/train", "images")
    input_dir_labels = os.path.join("fiok_train/train", "labels")

    # üîç √ñsszegy≈±jtj√ºk az √∂sszes k√©p f√°jlt (jpg, png, stb.)
    image_files = glob.glob(os.path.join(input_dir_images, "*.jpg")) + glob.glob(os.path.join(input_dir_images, "*.png"))

    # üîÑ Minden f√°jlra v√©grehajtjuk a t√ºkr√∂z√©st
    for image_path in image_files:
        # üìå Alapf√°jlnevek el≈ëk√©sz√≠t√©se
        base_name = os.path.splitext(os.path.basename(image_path))[0]  # Pl.: "image1"
        annotation_path = os.path.join(input_dir_labels, f"{base_name}.txt")  # YOLO annot√°ci√≥ f√°jl

        # üìå K√©p beolvas√°sa OpenCV-vel
        image = cv2.imread(image_path)
        if image is None:
            print(f"Hiba a k√©p beolvas√°sakor: {image_path}")
            continue

        # üìå K√©p v√≠zszintes t√ºkr√∂z√©se (horizontal flip)
        flipped_image = cv2.flip(image, 1)

        # üìå √öj f√°jlnevek gener√°l√°sa (_flip kieg√©sz√≠t√©ssel)
        flipped_image_path = os.path.join(input_dir_images, f"{base_name}_flip.jpg")
        flipped_annotation_path = os.path.join(input_dir_labels, f"{base_name}_flip.txt")

        # üíæ K√©p ment√©se √∫j f√°jlk√©nt
        cv2.imwrite(flipped_image_path, flipped_image)

        # üîÑ Annot√°ci√≥ m√≥dos√≠t√°sa, ha l√©tezik a TXT f√°jl
        if os.path.exists(annotation_path):
            with open(annotation_path, "r") as f:
                lines = f.readlines()

            flipped_annotations = []
            for line in lines:
                parts = line.strip().split()
                if len(parts) != 5:
                    continue  # Hib√°s sorokat kihagyjuk

                class_id, x_center, y_center, width, height = map(float, parts)

                # üìå X koordin√°ta t√ºkr√∂z√©se
                new_x_center = 1.0 - x_center  # X flip: 1 - x_center

                # √öj annot√°ci√≥ form√°z√°sa
                flipped_annotations.append(
                    f"{int(class_id)} {new_x_center:.6f} {y_center:.6f} {width:.6f} {height:.6f}\n")

            # üíæ √öj annot√°ci√≥s f√°jl ment√©se
            with open(flipped_annotation_path, "w") as f:
                f.writelines(flipped_annotations)

    #print(f"Mentve: {flipped_image_path}, {flipped_annotation_path}")
    print("#INFO: T√ºkr√∂z√∂tt k√©pek √©s m√≥dos√≠tott txt f√°jlok ment√©se k√©sz")

def draw_boxes(image, results):
    image_copy = image.copy()
    for result in results:
        for box in result.boxes:

            x1, y1, x2, y2 = map(int, box.xyxy[0])  # Bounding box koordin√°t√°k
            if y1 > 250:
                continue
            conf = box.conf[0].item()  # Konfidencia √©rt√©k
            cls = int(box.cls[0])  # Oszt√°ly index
            label = result.names[cls]  # Oszt√°ly neve

            # T√©glalap rajzol√°sa
            cv2.rectangle(image_copy, (x1, y1), (x2, y2), (0, 255, 0), 2)

            # Felirat sz√∂vege
            text = f"{label} {conf:.2f}"

            # Sz√∂veg m√©rete √©s h√°tt√©r
            (w, h), _ = cv2.getTextSize(text, cv2.FONT_HERSHEY_SIMPLEX, 0.5, 2)
            cv2.rectangle(image_copy, (x1, y1 - h + 25), (x1 + w, y1 + 25), (0, 255, 0), -1)
            cv2.putText(image_copy, text, (x1, y1 + 25), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 2)

    return image_copy

def find_latest_csv_by_timestamp(directory=None):
    """
    Megkeresi az id≈ëben legutols√≥ CSV f√°jlt a time.time() timestamp alapj√°n

    Args:
        directory: mappa √∫tvonal (None eset√©n jelenlegi mappa)

    Returns:
        tuple: (f√°jl_√∫tvonal, timestamp) vagy (None, None) ha nincs tal√°lat
    """
    if directory is None:
        directory = os.getcwd()

    print(f"CSV f√°jlok keres√©se mapp√°ban: {directory}")

    # √ñsszes CSV f√°jl keres√©se
    csv_pattern = os.path.join(directory, "*.csv")
    csv_files = glob.glob(csv_pattern)

    if not csv_files:
        print("Nincs CSV f√°jl a mapp√°ban!")
        return None, None

    # Timestamp kinyer√©se a f√°jlnevekb≈ël
    file_timestamps = []

    for file_path in csv_files:
        filename = os.path.basename(file_path)
        name_without_ext, extension = os.path.splitext(filename)
        timestamp = name_without_ext.split("_")[3:5]
        full_timestamp = f"{timestamp[0]}_{timestamp[1]}"
        file_timestamps.append((file_path, full_timestamp))

    if not file_timestamps:
        print("Egyetlen f√°jlban sem tal√°lhat√≥ √©rv√©nyes timestamp!")
        return None, None

    # Legutols√≥ f√°jl kiv√°laszt√°sa timestamp alapj√°n
    latest_file, latest_timestamp = max(file_timestamps, key=lambda x: x[1])

    print(f"\nLegutols√≥ f√°jl: {os.path.basename(latest_file)}")
    print(f"Timestamp: {latest_timestamp}")

    return latest_file, latest_timestamp